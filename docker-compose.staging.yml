version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: gsc_db_staging
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gsc_staging}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - gsc_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-gsc_staging}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: gsc_api_staging
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-gsc_staging}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3001}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-15}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      SESSION_SECRET: ${SESSION_SECRET}
      REDIS_URL: ${REDIS_URL}
    ports:
      - "${API_PORT:-3000}:3000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - gsc_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Client (served via Nginx)
  client:
    build:
      context: .
      dockerfile: Dockerfile.client
      target: production
    container_name: gsc_client_staging
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
      VITE_APP_NAME: ${VITE_APP_NAME:-GSC Staging}
      VITE_ENVIRONMENT: staging
    ports:
      - "${CLIENT_PORT:-3001}:80"
    depends_on:
      - api
    networks:
      - gsc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: gsc_redis_staging
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_staging:/data
    networks:
      - gsc_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: gsc_nginx_staging
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
      - client
    networks:
      - gsc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_staging:
    driver: local
  redis_data_staging:
    driver: local

networks:
  gsc_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16