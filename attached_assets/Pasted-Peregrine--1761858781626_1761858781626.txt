Peregrine هو نظام متكامل لإدارة الحراس الأمنيين والعقود والحوادث، تم تطويره باستخدام تقنيات حديثة ليوفر حلاً مؤتمتًا وسهل الاستخدام لإدارة العمليات اليومية في المؤسسات الأمنية أو شركات الحراسة.

يهدف التطبيق إلى توحيد عمليات المراقبة والتبليغ وإدارة الموارد البشرية والعقود والحوادث في منصة واحدة متصلة بين الواجهة الخلفية (Backend) والواجهة الأمامية (Frontend) بشكل متزامن وفعّال.

🔹 التقنية المستخدمة في بناء التطبيق
⚙️ 1. الواجهة الخلفية (Backend)

اللغة والإطار: C# مع ASP.NET Core 8.0

قاعدة البيانات: Microsoft SQL Server 2019

ORM المستخدم: Entity Framework Core

بيئة التطوير: Visual Studio 2022 أو VS Code

التوثيق المدمج: Swagger UI

بنية المجلدات:

Controllers → للتحكم في RESTful APIs

Models → لنماذج البيانات (Entities)

Services → لتنفيذ المنطق البرمجي والخدمات الوسيطة

Data → لسياق قاعدة البيانات (DbContext)

هذه البنية تمنح النظام قابلية للتوسع، وإمكانية فصل المنطق التجاري عن الواجهة، وتسهل التكامل مع الأنظمة الأخرى مستقبلًا.

💻 2. الواجهة الأمامية (Frontend)

الإطار: Flutter (Dart)

بيئة التطوير: Android Studio أو VS Code

الهيكل:

lib/models → تعريف النماذج المتوافقة مع الـ API

lib/services → إدارة عمليات الاتصال مع الـ Backend عبر HTTP

lib/screens → شاشات التطبيق (Login، Dashboard، Reports، وغيرها)

lib/widgets → عناصر الواجهة القابلة لإعادة الاستخدام

lib/providers → إدارة حالة التطبيق (State Management)

تم تصميم الواجهة لتكون سريعة، تفاعلية، ومتجاوبة مع مختلف الأجهزة (Android/iOS/Web).

🔹 آلية عمل النظام
🧩 1. عملية تسجيل الدخول والتحقق من الهوية

المستخدم يدخل اسم المستخدم وكلمة المرور.

يتم إرسال الطلب إلى API المصمم في ASP.NET للتحقق من البيانات عبر قاعدة SQL.

في حالة النجاح، يتم إنشاء Token مصادقة (JWT) لتأمين الجلسة.

🧾 2. إدارة الحراس (Guards Management)

يمكن للإدارة إضافة حراس جدد، تعديل بياناتهم، تتبع مواقعهم أو حالتهم.

كل سجل حارس يرتبط بعقد عمل داخل قاعدة البيانات.

📄 3. إدارة العقود (Contracts)

النظام يسمح بإنشاء عقود جديدة بين الشركة والعملاء.

يتم ربط العقد بالحارس وبالعميل مع تفاصيل المدة والموقع ونوع الخدمة.

كل عقد يتم أرشفته في قاعدة البيانات ويمكن البحث عنه وتعديله بسهولة.

🚨 4. إدارة الحوادث (Accidents / Incidents)

في حال وقوع حادث، يمكن للحارس أو المشرف تسجيله من خلال التطبيق.

النظام يقوم بتوثيق تفاصيل الحادث وإرسال إشعارات للمديرين المعنيين.

📡 5. الاتصال بين الـ Frontend والـ Backend

تتم جميع العمليات عبر واجهات RESTful APIs.

يتم إرسال الطلبات من خلال خدمات Flutter (مثل auth_service.dart وguard_service.dart).

يستخدم النظام بروتوكول HTTPS لضمان الأمان في نقل البيانات.

🔹 مميزات تطبيق Peregrine

✅ تكامل كامل بين النظامين (Frontend & Backend)

الاتصال فوري بين التطبيق وقاعدة البيانات.

🔐 نظام صلاحيات وأدوار متقدم (Admin / Guard / Supervisor)

لكل مستخدم صلاحيات محددة وفقاً لدوره.

📊 لوحة تحكم تفاعلية لإدارة العقود والحوادث والحراس

واجهة رسومية حديثة وسهلة الاستخدام.

📱 تطبيق متعدد المنصات (Cross-platform)

يعمل على Android وiOS وأيضاً على الويب.

📦 إمكانية استعادة النسخ الاحتياطية بسهولة

بفضل قاعدة البيانات SQL Server المدعومة بـملف النسخة الاحتياطية (peregrineDB.bak).

🧠 بنية مرنة قابلة للتوسيع مستقبلاً

إمكانية إضافة وحدات جديدة مثل نظام الحضور والانصراف أو تتبع الموقع GPS.