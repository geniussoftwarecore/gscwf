نرغب في توسيع منصة GSC لتشمل لوحة تحكم إدارية لإدارة طلبات العملاء وملاحظاتهم، ونظام إشعارات متكامل بين الإدارة والعميل، وخيارات دفع عبر البطاقة الائتمانية والمحافظ الإلكترونية المحلية في اليمن، وإمكانية رفع الملفات عند التواصل، بالإضافة إلى عرض تفاصيل الرسوم ومدة الاشتراك في داشبورد العميل.

المهام المطلوبة
1. إنشاء نظام إدارة العملاء ولوحة تحكم للإدارة

تعريف بيانات الطلبات والملاحظات:

أنشئ ملفًا جديدًا client/src/data/clientRequests.ts يحتوي على نموذج للطلبات والاقتراحات التي يرسلها العملاء، على شكل مصفوفة من الكائنات مثلاً:

export interface ClientRequest {
  id: string;
  userId: string;
  serviceId: string;
  type: 'request' | 'suggestion' | 'comment';
  title: string;
  description: string;
  attachments?: string[]; // روابط الملفات المرفوعة
  status: 'new' | 'in-progress' | 'answered';
  createdAt: string;
  updatedAt: string;
}

export const clientRequests: ClientRequest[] = [];


أضف دوال مساعدة لإضافة طلب جديد وتغيير حالة الطلب، بحيث يمكن استخدامها لاحقًا من خلال السياقات أو استعلامات React Query.

لوحة تحكم للإدارة:

أنشئ صفحة جديدة client/src/pages/admin/dashboard.tsx (يمكن الوصول إليها عبر /admin/dashboard).

استخدم مكوِّنات مثل Tabs أو Table لعرض قائمة الطلبات والمقترحات الجديدة، مع إمكانية تغيير حالتها (مثل “جديد”، “جارٍ المعالجة”، “تم الرد”).

أضف قسمًا في نفس الصفحة يعرض إحصاءات سريعة (عدد الطلبات الجديدة، عدد الطلبات المكتملة، إلخ).

اربط الصفحة بسياق المصادقة بحيث لا يستطيع الوصول إليها إلا المستخدمون ذوو دور “مدير”.

ربط الطلبات من صفحة الخدمات وصفحة الاتصال:

في service-detail.tsx، أضف زرًا أو نموذجًا جديدًا داخل قسم “أعمال قمنا بعملها” أو قرب خطة الأسعار يسمح للعميل بإرسال طلب مشروع مخصص أو تعليق/اقتراح. يتضمن النموذج حقولًا مثل العنوان والوصف وإرفاق ملفات (انظر النقطة 5 أدناه).

عند إرسال النموذج، أضف إدخالًا جديدًا إلى clientRequests مع الحالة new، وفعّل إشعارًا (انظر نقطة الإشعارات).

2. دمج وسائل الدفع

إعداد نموذج الدفع:

أنشئ مكوّنًا عامًا PaymentForm في client/src/components/ui/payment-form.tsx يستقبل بيانات الخدمة أو الاشتراك (مثل planId, amount, currency).

أضف مدخلات لبيانات البطاقة الائتمانية (رقم البطاقة، تاريخ الانتهاء، CVV). هذه البيانات سيتم إرسالها لاحقًا إلى بوابة دفع حقيقية؛ حالياً يكفي تخزينها في الحالة وطباعتها في وحدة التحكم.

دمج المحافظ الإلكترونية اليمنية:

أضف خيارات دفع إضافية في نفس النموذج للسماح للمستخدم بالاختيار بين:

محفظة جيب – رابط الموقع: http://e-jaib.com/

كاش – https://www.cash.com.ye/ar

جوالي – https://www.jawali.com.ye/

فلوosak (بنك الكريمي) – https://www.yk-bank.com/ar/Personal/e-wallet/floosak

One Cash – https://onecashye.com/

عند اختيار أي من هذه المحافظ، اعرض زرًا يوجّه المستخدم لفتح الرابط في نافذة جديدة لإتمام عملية الدفع، مع حفظ حالة الطلب (مثل paymentPending) إلى أن يتم تأكيد الدفع يدويًا من الإدارة.

خيارات العملة:

أضف خاصية اختيار العملة في صفحة الدفع (مثلاً “دولار أمريكي” أو “ريال يمني”). استخدم مكتبة Intl.NumberFormat لتنسيق الأرقام حسب العملة المختارة.

احفظ اختيار العملة في حالة (state) أو في السياق لاستخدامها في أماكن أخرى.

3. نظام الإشعارات

إنشاء سياق للإشعارات:

أنشئ ملفًا client/src/contexts/NotificationContext.tsx يستخدم createContext لإدارة قائمة الإشعارات. الإشعار قد يتضمن:

export interface Notification {
  id: string;
  userId: string; // صاحب الإشعار (العميل أو المدير)
  type: 'new-request' | 'reply' | 'payment' | 'general';
  message: string;
  read: boolean;
  createdAt: string;
}


أضف دوالًا مثل addNotification, markAsRead, وgetNotificationsForUser.

إظهار الإشعارات في الواجهة:

في شريط التنقل أو في الداشبورد، أضف أيقونة جرس تعرض عدد الإشعارات غير المقروءة. عند النقر عليها تفتح قائمة بالإشعارات.

في لوحة تحكم الإدارة، أنشئ قسمًا يعرض الإشعارات الجديدة (مثل طلبات جديدة أو دفع معلّق) ويتيح للمدير تمييزها كمقروءة.

تفعيل الإشعارات عند التفاعل:

عند إرسال العميل طلبًا جديدًا من صفحة الخدمة أو صفحة الاتصال، استدع دالة addNotification لإنشاء إشعار للمدراء من النوع new-request.

عند رد الإدارة على الطلب، أنشئ إشعارًا للعميل من النوع reply.

4. تحسين صفحة الاتصال وإمكانية رفع الملفات

إضافة حقل رفع ملفات:

في client/src/pages/contact.tsx أو الصفحة المكافئة (إذا كانت موجودة)، أضف عنصر <input type="file" multiple accept=".pdf,.doc,.docx,.png,.jpg"/>.

خزّن الملفات المختارة في حالة useState<File[]>.

عند إرسال النموذج، قم برفع الملفات إلى مجلد مؤقت (يمكن استخدام FormData والرفع إلى API وهمية)، أو اطبع قائمة الملفات في وحدة التحكم مؤقتًا مع إضافة روابطها داخل ClientRequest.attachments.

إضافة حقول إضافية:

أضف حقولًا مثل “نوع الخدمة المطلوبة” (dropdown)، “الميزانية المتوقعة”، “مدة التنفيذ”، وغيرها حسب الحاجة.

قم بدمج هذه البيانات في ClientRequest عند الإرسال.

5. عرض رسوم الخدمات ومدة الاشتراك في الداشبورد

إضافة قسم “المعاملات” في داشبورد العميل:

في client/src/pages/dashboard.tsx, أضف تبويبًا جديدًا مثل “المعاملات” أو “مدفوعاتي”.

اعرض جدولًا يتضمن اسم الخدمة/الباقة، السعر المدفوع، طريقة الدفع، التاريخ، ومدة الاشتراك (إن وجدت). يمكن استخراج هذه المعلومات من بيانات الاشتراكات التي يُعيدها الـ API (أو من بيانات وهمية مؤقتًا).

استخدم Intl.DateTimeFormat لعرض تواريخ بداية ونهاية الاشتراك.

6. تحسين الأدوار والصلاحيات

إضافة خاصية الدور للمستخدم:

حدّث واجهة User في AuthContext لتتضمن role: 'admin' | 'client'.

عند تسجيل الدخول، احفظ دور المستخدم في userData. المستخدم الإداري سيرى لوحة التحكم الإدارية، بينما المستخدم العادي سيرى الداشبورد الخاص به فقط.

حماية المسارات:

أنشئ مكوِّنًا PrivateRoute يتأكد من أن isAuthenticated صحيح قبل عرض الصفحة، ومكوّنًا AdminRoute يتأكد أيضًا أن الدور هو admin.