Replit AI — تنفيذ تعديلات صفحة خدماتنا › تطوير تطبيقات الهواتف الذكية في مشروع gsc2 + منع فقدان البيانات

المهمة: أنت المطوّر التنفيذي لمستودع GitHub:
https://github.com/geniussoftwarecore/gsc2.git

نفّذ جميع البنود التالية بدقة، مع فتح فرع جديد باسم:
feature/mobile-app-service-setup-wizard

0) اكتشاف التقنية المستخدمة وتوثيقها

افحص المشروع تلقائيًا واكتشف:

نوع الإطار الأمامي (غالبًا Vite + React + TypeScript).

نظام الأنماط (TailwindCSS + shadcn/ui إن وُجد).

ملف/مصدر الخط المستخدم فعليًا (tailwind.config / global.css / index.html).

نسق الألوان (المتغيرات/الـtokens إن وُجدت).

اكتب هذه النتائج في قسم جديد داخل README.md بعنوان:
“Stack & Design Profile (Auto-detected)”
مثال:

Framework: React (Vite, TS)

UI System: TailwindCSS + shadcn/ui

Font: Inter (أو Cairo/… اذكر الاسم الحقيقي المكتشف)

Theme/Palette: (أسماء الألوان/درجاتها لو متاحة)

لا تفترض خطًا خارجيًا من Google Fonts في الإنتاج؛ إن وُجد استيراد خارجي، قم بتضمين الخط محليًا (assets) وتحديث التهيئة للإشارة للملفات المحلية في الإنتاج.

1) إضافة أيقونات Android / iOS في صفحة تفاصيل الخدمة

حدّد مسار صفحة الخدمة: “خدماتنا › تطوير تطبيقات الهواتف الذكية” (ابحث عن route/slug مثل: /services/mobile-app-development).

في أعلى صفحة التفاصيل، أضف شريطًا بصريًا يحوي أيقونتين:

Android (شعار روبوت أندرويد).

iOS (Apple icon).

استخدم أيقونات من مجموعة متاحة بالمشروع (lucide-react أو بديلة)، مع تلميحات Tooltips: “Android Apps”, “iOS Apps”.

اجعل الأيقونات RTL-friendly وتدعم الوضع الداكن/الفاتح الموافق للنسق الحالي.

2) إنشاء Setup Wizard (معالج إعداد) من 3 مراحل

أ/ المرحلة 1 — نوع التطبيق (حسب الأنشطة)

قائمة اختيار (Radio Cards) تعرض أنواعًا مثل:
تجاري، تعليمي، ترفيهي، خدماتي، صحي، تجارة إلكترونية، إعلامي/أخبار، مخصص

عند اختيار نوع، خزّن القيمة في حالة المعالج (state) وأرسلها لاحقًا إلى الـAPI.

ب/ المرحلة 2 — الميزات وفق النوع المختار

اعرض Grid من الميزات مع فلاتر تعتمد على “النوع” من المرحلة 1. أمثلة ميزات:

حساب مستخدمين وتسجيل دخول، إشعارات Push، دردشة داخلية، دفع إلكتروني، خرائط ومواقع، رفع ملفات/صور، لوحة تحليلات، تكامل API خارجي، وضع Offline، لغات متعددة (عربي/إنجليزي)، صلاحيات وأدوار، متجر ودفعات، حجوزات ومواعيد…

اجعل الاختيار متعدد (Checkbox Cards)، مع وصف قصير لكل ميزة.

أضف منطق تفعيل/تعطيل ميزات (dependency)، مثل: الدفع الإلكتروني يتطلب “حسابات/تسجيل دخول”.

ج/ المرحلة 3 — إرسال الطلب (Contact + Summary)

اعرض ملخّصًا لما اختاره العميل:

نوع التطبيق

قائمة الميزات

ملاحظات نصية (حقل textarea)

نموذج تواصل: الاسم، البريد، الهاتف (مع تحقق)، الشركة/النشاط (اختياري).

مرفقات: تمكين رفع ملف/صور (multiple) لرفع سكتش/متطلبات/واجهات.

بعد الإرسال الناجح، إظهار رسالة تأكيد واضحة مع رقم طلب (UUID).

مطلوب UI راقٍ:

استخدم مكوّنات shadcn/ui (إن متوفرة) أو مكونات جاهزة في المشروع.

حالات تحميل، أخطاء ميدانية، وتعطيل زر الإرسال أثناء الطلب.

3) طبقة البيانات — نماذج وقاعدة البيانات (منع فقدان البيانات)
3.1 النماذج (Models)

أنشئ/حدّث مخطط قاعدة البيانات (PostgreSQL + Drizzle أو ORM المشروع) بإضافة الجداول التالية (أعد التسمية حسب أسلوبك إن لزم):

mobile_app_orders

id (PK, UUID)

app_type (TEXT) — قيمة من المرحلة 1

features (JSONB) — مصفوفة ميزات من المرحلة 2

notes (TEXT)

name (TEXT) — اسم العميل

email (TEXT) — بريد العميل (تحقق تنسيق)

phone (TEXT)

company (TEXT, nullable)

attachments (JSONB) — بيانات الملفات المرفوعة (المسار/الاسم)

created_at TIMESTAMP DEFAULT now()

إن كان لديك جدول audit log للمشروع، أضف تسجيلًا لكل عملية إنشاء طلب جديد.

3.2 المهاجرات (Migrations)

أضف مهاجرة لإنشاء الجداول/الأعمدة أعلاه.

قيود مهمة لمنع تلف/ضياع البيانات:

PRIMARY KEY واضح.

فهارس على created_at و/أو البريد/الهاتف عند الحاجة.

لا تستخدم in-memory storage في الإنتاج مطلقًا.

3.3 حماية بيئة الإنتاج

في كود تهيئة الـDB:

إن كان NODE_ENV=production وDATABASE_URL غير موجود ⇒ أوقف الإقلاع برسالة خطأ، ولا تسمح بأي in-memory fallback.

أضف فحصًا مركزيًا للبيئة وتوثيقه في README.

4) API — مسارات آمنة

أنشئ/حدّث مسار API POST مثل:
POST /api/mobile-app-orders

Request body (JSON):

{
  "app_type": "تعليمي",
  "features": ["push", "auth", "uploads", "analytics"],
  "notes": "تطبيق للمدرسة...",
  "name": "اسم العميل",
  "email": "client@example.com",
  "phone": "+9677xxxxxxx",
  "company": "جهة/شركة (اختياري)"
}


رفع المرفقات: دعم multipart/form-data؛ خزّن الميتاداتا في attachments، والملفات إلى تخزين آمن (محلي أو S3-compatible إن متاح بالمشروع).

لف عملية الإنشاء في Transaction:

إنشاء سجل الطلب.

حفظ المرفقات (مسارات/روابط).

تسجيل Audit.

إذا فشل أي جزء ⇒ Rollback.

أعد استجابة 201 مع جسم JSON يحوي id ورابط/رسالة نجاح.

التعامل مع الأخطاء:

400/422 للمدخلات غير الصحيحة، 500 للأخطاء غير المتوقعة.

أعد JSON منسقًا للخطأ، والواجهة تعرض Toast واضح.

5) ربط الواجهة بالـAPI

في المرحلة 3، عند الضغط “إرسال الطلب”:

إن كانت هناك مرفقات: استخدم FormData وmultipart/form-data.

غير ذلك: JSON عادي.

انتظر الاستجابة (await) قبل إظهار النجاح أو تفريغ المدخلات.

عند !res.ok اعرض رسالة واضحة ولا تفرّغ الحقول.

بعد نجاح الإرسال، اعرض رقم الطلب (ID) وأرسل نسخة للعميل عبر البريد إن كان نظام البريد مفعّل (إن لم يكن موجودًا، اترك TODO موثقًا).

6) الوصولية و RTL ودعم اللغتين

تأكد من دعم RTL (العربية) في المكوّنات الجديدة.

عناوين وخطوات المعالج بالعربية واضحة.

جهّز مفاتيح ترجمة قابلة للتبديل (إن كان المشروع متعدد اللغات).

الخط: إن كان الخط الحالي غير مناسب للعربية، فعّل Cairo محليًا كبديل للعربية، مع الحفاظ على الخط اللاتيني (Inter مثلًا) للإنجليزية — بدون أي اتصال خارجي في الإنتاج.

7) الاختبارات (قبول يدوي + آلي)
7.1 قبول يدوي

إنشاء طلب جديد عبر المعالج (كل المراحل) ثم إعادة تحميل الصفحة ⇒ الطلب موجود في قاعدة البيانات.

إعادة تشغيل الخادم (محاكاة Production) ⇒ الطلب ما زال موجودًا.

إرسال نموذج مع مرفقات ⇒ الروابط/المسارات محفوظة وتظهر في JSON الاستجابة.

7.2 اختبارات آلية بسيطة (اختياري)

اكتب اختبار API سريع (supertest/pytest حسب الستاك) لسيناريو الإنشاء/الفشل.

تأكد من استرجاع الطلب بعد الإنشاء.

8) التوثيق وملفات البيئة

حدّث README.md بإضافة قسم:
“Mobile App Service — Setup Wizard” يشرح المراحل الثلاث، الـAPI، والمتغيرات.

أضف/حدّث .env.example بقيم لازمة:

DATABASE_URL=postgres://...

أي مفاتيح تخزين مرفقات (إن وُجدت)

NODE_ENV

9) الكومِت والـPR

رسائل مقترحة:

feat(services/mobile): add Android/iOS icons on details page

feat(wizard): 3-step mobile app setup (type → features → contact)

feat(api/db): mobile_app_orders model, migrations, attachments, audit

fix(prod): forbid in-memory fallback; require DATABASE_URL

docs: add auto-detected design profile + setup wizard usage

افتح Pull Request بعنوان:
“Mobile App Service: Setup Wizard + Data Durability (No In-Memory Fallback)”
وارفق لقطات شاشة من المعالج ونتائج الاختبار اليدوي.

معيار النجاح النهائي (Definition of Done):

تم توثيق نوع التصميم والخط والنسق فعليًا في README بعد الاكتشاف الآلي.

تظهر أيقونات Android/iOS في صفحة تفاصيل الخدمة.

يعمل معالج إعداد ثلاثي المراحل ويحفظ الطلبات في PostgreSQL.

لا يعمل الإنتاج بدون DATABASE_URL، ولا يوجد أي in-memory fallback.

تمرّ اختبارات القبول اليدوية، وتبقى البيانات بعد إعادة تشغيل الخادم.

نفّذ جميع الخطوات بدقّة، وادفع التغييرات في فرعك مع فتح PR بالتسمية المحددة.