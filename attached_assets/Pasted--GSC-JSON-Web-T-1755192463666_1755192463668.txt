نرغب في تطبيق مجموعة من التحسينات المهمة على مشروع GSC، تشمل تعزيز نظام المصادقة باستخدام JSON Web Tokens (JWT)، ربط الداشبورد ببيانات المستخدم الفعلية، تحسين الواجهة وتدفق التوجيه، وتنظيم بيانات “أعمال قمنا بعملها”. يرجى اتباع التعليمات أدناه بدقة للحصول على أفضل نتيجة ممكنة.

المهام المطلوبة
1. تحديث سياق المصادقة (AuthContext) لدعم JWT

في client/src/contexts/AuthContext.tsx:

أضف خاصية اختيارية token?: string إلى واجهة User.

حدّث دالة login بحيث تستقبل أيضًا قيمة token وتحفظها في localStorage تحت مفتاح "gsc_token".

حدّث دالة logout بحيث تزيل "gsc_token" من localStorage.

أضف تعليقة توضّح أنه في المستقبل يجب التحقق من صلاحية الـ JWT عن طريق إرسال طلب إلى الـ backend.

عدّل صفحات تسجيل الدخول والتسجيل (login.tsx وregister.tsx) بحيث تُمرر رمزًا افتراضيًا (مثلاً "mock-jwt-token") إلى دالة login عند نجاح العملية، تمهيدًا لاستخدام رمز حقيقي لاحقًا.

2. ربط الداشبورد بالمستخدم المصادق عليه

في client/src/pages/dashboard.tsx:

استورد useAuth من @/contexts/AuthContext.

استخدم:

const { user, isAuthenticated } = useAuth();
const userId = user?.id;


بدّل المعرف الثابت (user-1) بـ userId في الاستعلامات الخاصة بالاشتراكات والطلبات
raw.githubusercontent.com
.

أضف شرطًا في بداية المكوّن: إذا كان !isAuthenticated، استخدم useLocation لإعادة التوجيه إلى صفحة /login.

أضف رسالة ترحيب في واجهة الداشبورد تعرض اسم المستخدم من user?.name إذا كان موجودًا.

3. إضافة مؤشر تحميل في شريط التنقل

في client/src/components/layout/navigation.tsx:

استدعِ أيضًا خاصية loading من useAuth.

قبل عرض روابط التنقل، تحقق من loading: إذا كانت true، اعرض عنصرًا بسيطًا مثل <span>جارٍ التحميل...</span> أو دوران صغير مكان أزرار المصادقة.

بعد انتهاء التحميل، استمر بعرض الروابط أو قائمة المستخدم حسب حالة isAuthenticated.

4. تحسين التوجيه في قائمة المستخدم

في navigation.tsx:

بدّل استخدام setLocation داخل عناصر القائمة المنسدلة، واستبدله بـ Link من wouter لتوحيد التوجيه. مثال:

<Link href="/dashboard">
  <DropdownMenuItem onSelect={closeMobileMenu}>
    <HomeIcon className="mr-2 h-4 w-4" />
    <span>الداشبورد</span>
  </DropdownMenuItem>
</Link>


كرر نفس التعديل لعنصر الإعدادات (/settings).

5. تنظيم بيانات المشاريع (أعمال قمنا بعملها)

أنشئ ملفًا جديدًا client/src/data/dummyProjects.ts يحتوي على مصفوفة من الكائنات لكل من خدمات mobile وweb. أمثلة للحقول:

export const dummyProjects = {
  mobile: [
    {
      id: "mob1",
      title: "تطبيق التسوق الإلكتروني",
      description: "تطبيق جوال شامل للتسوق.",
      imageUrl: "/assets/projects/mobile-1.jpg",
      technologies: ["React Native", "Firebase", "Redux"],
      duration: "3 أشهر",
    },
    // ... مشاريع أخرى
  ],
  web: [
    {
      id: "web1",
      title: "منصة التجارة الإلكترونية",
      description: "موقع تجارة إلكترونية متكامل.",
      imageUrl: "/assets/projects/web-1.jpg",
      technologies: ["React", "Node.js", "PostgreSQL"],
      duration: "4 أشهر",
    },
    // ... مشاريع أخرى
  ],
};


عدّل client/src/pages/service-detail.tsx:

استورد dummyProjects من المسار الجديد.

استخدم البيانات المناسبة بدلًا من مصفوفة dummyProjects المعرّفة داخل المكوّن
raw.githubusercontent.com
.

استبدل الصور الوهمية بمسارات صور حقيقية في مجلد assets/projects، أو اتركها لحين رفع الصور لاحقًا.

أضف تعليقًا يوضح كيفية تحديث هذه البيانات عند إضافة مشاريع فعلية.

6. توحيد التنسيق وإضافة تعليقات

شغّل أدوات التنسيق (Prettier وESLint) على جميع الملفات لضمان اتّساق الكود.

أضف تعليقات توضيحية مختصرة (بالعربية أو الإنجليزية) في الملفات التي تحتوي منطقًا معقدًا، مثل AuthContext.tsx, service-detail.tsx, وdashboard.tsx.

تأكّد من أن أسماء المتغيرات والدوال واضحة ومعبرة.

النتيجة المتوقعة

بعد تنفيذ هذه المهام:

سيصبح نظام المصادقة مجهزًا لدعم JWT وسيوفّر حالة مستخدم حقيقية في جميع الصفحات.

لن يستطيع المستخدم غير المسجّل دخول الداشبورد، وسيتم عرض اسم المستخدم المسجّل أعلى الصفحة.

سيظهر مؤشّر تحميل في شريط التنقل أثناء استرجاع بيانات المصادقة.

ستُنظّم بيانات المشاريع في ملف منفصل وتصبح جاهزة للتحديث بمشاريع واقعية.

سيكون الكود منسقًا وواضحًا ومعلقًا بشكل جيد، مما يسهّل استمرارية التطوير.